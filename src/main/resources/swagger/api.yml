# API-first development with OpenAPI
# This file will be used at compile time to generate Spring-MVC endpoint stubs using openapi-generator
openapi: '3.0.1'
info:
  title: 'appbase'
  version: 0.0.1
servers:
  - url: http://localhost:8080/api
    description: Development server
  - url: https://localhost:8080/api
    description: Development server with TLS Profile
paths:
  /users/list:
    get:
      tags:
        - 'accounts'
      summary: Gets all accounts
      operationId: getAccounts
      parameters:
        - name: pageable
          in: query
          required: false
          example: 'page=0&size=10&sort=configName,asc'
          schema:
            $ref: '#/components/schemas/Pageable'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Page'

components:
  schemas:
    AccountDTO:
      required:
        - login
        - email
        - langKey
      type: object

      properties:
        id:
          type: integer
          format: int64
          title: ID
          description: User ID
        login:
          type: string
          title: Login
          description: Login
          pattern: "[a-zA-Z0-9\\._\\-]{3,}"
        firstName:
          type: string
          title: First Name
          description: First Name of user
          maxLength: 50
        lastName:
          type: string
          title: Last Name
          description: First Name of user
          maxLength: 50
        email:
          type: string
          title: E-mail
          format: email
          minLength: 5
          maxLength: 254
        imageUrl:
          type: string
          title: Image URL
          maxLength: 256
        activated:
          type: boolean
        langKey:
          type: string
        createdBy:
          type: string
        createdDate:
          type: string
          format: date-time
        lastModifiedBy:
          type: string
        lastModifiedDate:
          type: string
          format: date-time
        authorities:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/Role'
    UserDTO:
      type: object
      properties:
        id:
          type: integer
          format: int64
          title: ID
          description: User ID
        login:
          type: string
          title: Login
          description: Login
          pattern: "[a-zA-Z0-9\\._\\-]{3,}"
    Pageable:
      description: minimal Pageable query parameters
      type: object
      properties:
        page:
          type: integer
          example: 0
        size:
          type: integer
          example: 10
        sort:
          type: string
          default: 'lastModifiedDate,desc'
    Page:
      description: Page object containing objects
      type: object
      properties:
        content:
          type: array
          description: 'Searched content'
          items:
            type: object
        first:
          type: boolean
          description: 'is it first page '
          example: false
        last:
          type: boolean
          description: 'is it last page '
          example: false
        totalPages:
          type: integer
          description: 'How many pages in total'
          example: 10,
        totalElements:
          type: integer
          description: 'How many elements in total for searched criteria'
          example: 20
        number:
          type: integer
          description: 'current page number'
          example: 2
        size:
          type: integer
          description: 'How many elements per page are there'
          example: 10

    Role:
      type: string
      enum:
        - ROLE_USER
        - ROLE_ADMIN

  responses:
    Problem:
      description: error occurred - see status code and problem object for more information.
      content:
        'application/problem+json':
          schema:
            $ref: 'problem.yaml#/Problem'

  securitySchemes:
    jwt:
      type: http
      description: JWT Authentication
      scheme: bearer
      bearerFormat: JWT
    basic:
      type: http
      description: Basic Authentication
      scheme: basic
security:
  - jwt: []
  - basic: []
